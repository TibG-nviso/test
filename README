# PowerShell Script to Extract Microsoft Office 2016 Trust Center Registry Settings with Accurate Paths and Explanations

# Define the output file path with a timestamp for uniqueness
$outputFile = "$env:USERPROFILE\Desktop\OfficeTrustCenterSettings_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"

# Initialize an array to store the results
$results = @()

# Define Office applications and their corresponding registry paths
$officeApps = @(
    "Access",
    "Excel",
    "Outlook",
    "PowerPoint",
    "Project",
    "Publisher",
    "Visio",
    "Word"
)

# Define the base registry path for Office 2016 (version 16.0)
$baseRegPath = "HKCU:\Software\Microsoft\Office\16.0"

# Define the settings to extract for each application, including accurate value names and explanations
$settings = @(
    @{
        Application = "Access"
        Settings = @(
            @{
                Name = "Block Macros from Running in Office Files from the Internet"
                RegPath = "Access\Security"
                ValueName = "BlockMacrosFromInternet"
                Explanation = @{
                    "1" = "Block macros from running in Office files downloaded from the internet."
                    "0" = "Do not block macros from running in Office files downloaded from the internet."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            },
            @{
                Name = "VBA Macro Notification Settings"
                RegPath = "Access\Security"
                ValueName = "VBAWarnings"
                Explanation = @{
                    "1" = "Disable all macros without notification."
                    "2" = "Disable all macros with notification."
                    "3" = "Disable all macros except digitally signed macros."
                    "4" = "Enable all macros (not recommended)."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            }
        )
    },
    @{
        Application = "Excel"
        Settings = @(
            @{
                Name = "Block Macros from Running in Office Files from the Internet"
                RegPath = "Excel\Security"
                ValueName = "BlockMacrosFromInternet"
                Explanation = @{
                    "1" = "Block macros from running in Office files downloaded from the internet."
                    "0" = "Do not block macros from running in Office files downloaded from the internet."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            },
            @{
                Name = "VBA Macro Notification Settings"
                RegPath = "Excel\Security"
                ValueName = "VBAWarnings"
                Explanation = @{
                    "1" = "Disable all macros without notification."
                    "2" = "Disable all macros with notification."
                    "3" = "Disable all macros except digitally signed macros."
                    "4" = "Enable all macros (not recommended)."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            },
            @{
                Name = "File Block Settings (Excel 97-2003 Workbooks and Templates)"
                RegPath = "Excel\Security\File Block Settings"
                ValueName = "Excel97_2003"
                Explanation = @{
                    "0" = "Do not block opening or saving of Excel 97-2003 files."
                    "1" = "Block opening of Excel 97-2003 files."
                    "2" = "Block saving of Excel 97-2003 files."
                    "3" = "Block both opening and saving of Excel 97-2003 files."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            }
        )
    },
    @{
        Application = "Outlook"
        Settings = @(
            @{
                Name = "Cryptography - Minimum Encryption Settings"
                RegPath = "Outlook\Security"
                ValueName = "MinimumEncryptionLevel"
                Explanation = @{
                    "1" = "No encryption required."
                    "2" = "Encrypt only messages sent to users in the organization's directory."
                    "3" = "Encrypt all messages."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            }
        )
    },
    @{
        Application = "PowerPoint"
        Settings = @(
            @{
                Name = "Block Macros from Running in Office Files from the Internet"
                RegPath = "PowerPoint\Security"
                ValueName = "BlockMacrosFromInternet"
                Explanation = @{
                    "1" = "Block macros from running in Office files downloaded from the internet."
                    "0" = "Do not block macros from running in Office files downloaded from the internet."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            },
            @{
                Name = "VBA Macro Notification Settings"
                RegPath = "PowerPoint\Security"
                ValueName = "VBAWarnings"
                Explanation = @{
                    "1" = "Disable all macros without notification."
                    "2" = "Disable all macros with notification."
                    "3" = "Disable all macros except digitally signed macros."
                    "4" = "Enable all macros (not recommended)."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            }
        )
    },
    @{
        Application = "Project"
        Settings = @(
            @{
                Name = "VBA Macro Notification Settings"
                RegPath = "Project\Security"
                ValueName = "VBAWarnings"
                Explanation = @{
                    "1" = "Disable all macros without notification."
                    "2" = "Disable all macros with notification."
                    "3" = "Disable all macros except digitally signed macros."
                    "4" = "Enable all macros (not recommended)."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            }
        )
    },
    @{
        Application = "Publisher"
        Settings = @(
            @{
                Name = "VBA Macro Notification Settings"
                RegPath = "Publisher\Security"
                ValueName = "VBAWarnings"
                Explanation = @{
                    "1" = "Disable all macros without notification."
                    "2" = "Disable all macros with notification."
                    "3" = "Disable all macros except digitally signed macros."
                    "4" = "Enable all macros (not recommended)."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            }
        )
    },
    @{
        Application = "Visio"
        Settings = @(
            @{
                Name = "Block Macros from Running in Office Files from the Internet"
                RegPath = "Visio\Security"
                ValueName = "BlockMacrosFromInternet"
                Explanation = @{
                    "1" = "Block macros from running in Office files downloaded from the internet."
                    "0" = "Do not block macros from running in Office files downloaded from the internet."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            },
            @{
                Name = "VBA Macro Notification Settings"
                RegPath = "Visio\Security"
                ValueName = "VBAWarnings"
                Explanation = @{
                    "1" = "Disable all macros without notification."
                    "2" = "Disable all macros with notification."
                    "3" = "Disable all macros except digitally signed macros."
                    "4" = "Enable all macros (not recommended)."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            }
        )
    },
    @{
        Application = "Word"
        Settings = @(
            @{
                Name = "Block Macros from Running in Office Files from the Internet"
                RegPath = "Word\Security"
                ValueName = "BlockMacrosFromInternet"
                Explanation = @{
                    "1" = "Block macros from running in Office files downloaded from the internet."
                    "0" = "Do not block macros from running in Office files downloaded from the internet."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            },
            @{
                Name = "VBA Macro Notification Settings"
                RegPath = "Word\Security"
                ValueName = "VBAWarnings"
                Explanation = @{
                    "1" = "Disable all macros without notification."
                    "2" = "Disable all macros with notification."
                    "3" = "Disable all macros except digitally signed macros."
                    "4" = "Enable all macros (not recommended)."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            },
            @{
                Name = "File Block Settings (Word 2003 Binary Documents and Templates)"
                RegPath = "Word\Security\File Block Settings"
                ValueName = "Word2003Binary"
                Explanation = @{
                    "0" = "Do not block opening or saving of Word 2003 binary documents and templates."
                    "1" = "Block opening of Word 2003 binary documents and templates."
                    "2" = "Block saving of Word 2003 binary documents and templates."
                    "3" = "Block both opening and saving of Word 2003 binary documents and templates."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            },
            @{
                Name = "File Block Settings (Word 2007 and Later Binary Documents and Templates)"
                RegPath = "Word\Security\File Block Settings"
                ValueName = "Word2007PlusBinary"
                Explanation = @{
                    "0" = "Do not block opening or saving of Word 2007 and later binary documents and templates."
                    "1" = "Block opening of Word 2007 and later binary documents and templates."
                    "2" = "Block saving of Word 2007 and later binary documents and templates."
                    "3" = "Block both opening and saving of Word 2007 and later binary documents and templates."
                    "Not Set or Not Found" = "The setting is not configured."
                }
            }
        )
    }
)

# Define Trusted Location settings separately as they are common across applications or under specific paths
$trustedLocations = @(
    @{
        Application = "Common"
        Name = "Trusted Location #1"
        RegPath = "Common\TrustCenter\TrustLocations\Location1"
        ValueName = "Path"
        Explanation = "The first trusted location path. Files in this location are exempt from certain security checks."
    }
)

# Function to safely retrieve a registry value
function Get-RegistryValueSafe {
    param (
        [string]$Path,
        [string]$Name
    )
    try {
        if (Test-Path $Path) {
            $value = Get-ItemProperty -Path $Path -Name $Name -ErrorAction Stop | Select-Object -ExpandProperty $Name
            return $value
        }
        else {
            return "Path Not Found"
        }
    }
    catch {
        return "Value Not Found"
    }
}

# Function to get explanation based on setting and value
function Get-Explanation {
    param (
        [hashtable]$Explanations,
        [string]$Value
    )
    if ($Explanations.ContainsKey($Value)) {
        return $Explanations[$Value]
    }
    elseif ($Explanations.ContainsKey("Not Set or Not Found")) {
        return $Explanations["Not Set or Not Found"]
    }
    else {
        return "No explanation available."
    }
}

# Function to retrieve Trusted Location Path
function Get-TrustedLocationPath {
    param (
        [string]$Path,
        [string]$Name
    )
    try {
        if (Test-Path $Path) {
            $locationPath = Get-ItemProperty -Path $Path -Name $Name -ErrorAction Stop | Select-Object -ExpandProperty $Name
            return $locationPath
        }
        else {
            return "Path Not Found"
        }
    }
    catch {
        return "Value Not Found"
    }
}

# Iterate through each Office application and its settings
foreach ($app in $officeApps) {
    # Find the application settings from the defined list
    $appSettings = $settings | Where-Object { $_.Application -eq $app }
    
    if ($appSettings) {
        foreach ($setting in $appSettings.Settings) {
            # Construct the full registry path
            $fullRegPath = Join-Path -Path $baseRegPath -ChildPath "$($setting.RegPath)"
            
            # Retrieve the registry value
            $value = Get-RegistryValueSafe -Path $fullRegPath -Name $setting.ValueName
            
            # Get the explanation for the value
            $explanation = Get-Explanation -Explanations $setting.Explanation -Value $value.ToString()
            
            # Create a custom object for the result
            $result = [PSCustomObject]@{
                Application  = $app
                SettingName  = $setting.Name
                RegistryPath = $fullRegPath
                ValueName    = $setting.ValueName
                Value        = $value
                Explanation  = $explanation
            }
            
            # Add the result to the results array
            $results += $result
        }
    }
    else {
        # If the application is not defined in the settings, note it
        $result = [PSCustomObject]@{
            Application  = $app
            SettingName  = "N/A"
            RegistryPath = "N/A"
            ValueName    = "N/A"
            Value        = "No Settings Defined"
            Explanation  = "No settings are defined for this application."
        }
        $results += $result
    }
}

# Iterate through each Trusted Location setting
foreach ($tl in $trustedLocations) {
    # Construct the full registry path
    $fullRegPath = Join-Path -Path $baseRegPath -ChildPath "$($tl.RegPath)"
    
    # Retrieve the registry value
    $value = Get-TrustedLocationPath -Path $fullRegPath -Name $tl.ValueName
    
    # Create a custom object for the result
    $result = [PSCustomObject]@{
        Application  = $tl.Application
        SettingName  = $tl.Name
        RegistryPath = $fullRegPath
        ValueName    = $tl.ValueName
        Value        = $value
        Explanation  = $tl.Explanation
    }
    
    # Add the result to the results array
    $results += $result
}

# Output the results to the console in a table format
$results | Format-Table -AutoSize

# Export the results to a CSV file
$results | Export-Csv -Path $outputFile -NoTypeInformation

Write-Output "`nAssessment Complete. Results saved to $outputFile"
